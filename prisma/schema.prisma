generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  username    String    @unique
  email       String?   @unique
  password    String?
  phone       String?   @unique
  avatar      String?
  github_id   String?   @unique
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  tokens      SMSToken[]
  products    Product[]
  posts       Post[]
  Comment     Comment[]
  Like        Like[]
}

model SMSToken {
  id          Int       @id @default(autoincrement())
  token       String    @unique
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
}

model Product {
  id          Int       @id @default(autoincrement())
  title       String
  price       Float
  description String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  photo       Photo[]
}

model Photo {
  id          Int       @id @default(autoincrement())
  url         String
  cf_id       String    @unique
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   Int
}

model Post {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  views       Int       @default(0)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  comments    Comment[]
  likes       Like[]
}

model Comment {
  id         Int      @id @default(autoincrement())
  payload    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId     Int
  postId     Int
}

model Like {
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  post        Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId      Int
  postId      Int
  
  @@id(name: "id", [userId, postId])
}